/*
Copyright (c) 2022 <copyright holders>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/lucasepe/expression-resolver/pkg/apis/expression/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExpressionLister helps list Expressions.
// All objects returned here must be treated as read-only.
type ExpressionLister interface {
	// List lists all Expressions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Expression, err error)
	// Expressions returns an object that can list and get Expressions.
	Expressions(namespace string) ExpressionNamespaceLister
	ExpressionListerExpansion
}

// expressionLister implements the ExpressionLister interface.
type expressionLister struct {
	indexer cache.Indexer
}

// NewExpressionLister returns a new ExpressionLister.
func NewExpressionLister(indexer cache.Indexer) ExpressionLister {
	return &expressionLister{indexer: indexer}
}

// List lists all Expressions in the indexer.
func (s *expressionLister) List(selector labels.Selector) (ret []*v1alpha1.Expression, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Expression))
	})
	return ret, err
}

// Expressions returns an object that can list and get Expressions.
func (s *expressionLister) Expressions(namespace string) ExpressionNamespaceLister {
	return expressionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExpressionNamespaceLister helps list and get Expressions.
// All objects returned here must be treated as read-only.
type ExpressionNamespaceLister interface {
	// List lists all Expressions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Expression, err error)
	// Get retrieves the Expression from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Expression, error)
	ExpressionNamespaceListerExpansion
}

// expressionNamespaceLister implements the ExpressionNamespaceLister
// interface.
type expressionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Expressions in the indexer for a given namespace.
func (s expressionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Expression, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Expression))
	})
	return ret, err
}

// Get retrieves the Expression from the indexer for a given namespace and name.
func (s expressionNamespaceLister) Get(name string) (*v1alpha1.Expression, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("expression"), name)
	}
	return obj.(*v1alpha1.Expression), nil
}
